import logging
import os
import random
import uuid
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, InputMediaVideo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

print("=== –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞ ===")

try:
    from database import Database
    print("‚úÖ Database –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Database: {e}")
    raise

try:
    from config import Config
    print("‚úÖ Config –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Config: {e}")
    raise

try:
    from file_manager import FileManager
    print("‚úÖ FileManager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ FileManager: {e}")
    raise

print("=== –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã ===")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

class MemesGameBot:
    def __init__(self):
        self.db = Database()
        self.file_manager = FileManager()
        self.active_games = {}
        self.user_sessions = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –º–µ–º–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        self.db.add_user(user.id, user.username, user.first_name, user.last_name)
        
        keyboard = [
            [InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game")],
            [InlineKeyboardButton("üìã –ü—Ä–∞–≤–∏–ª–∞", callback_data="show_rules")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
            [InlineKeyboardButton("üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥", callback_data="show_leaderboard")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '–ú–µ–º—ã –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏'!\n\n"
            "–°–æ–±–µ—Ä–∏ 2-8 –¥—Ä—É–∑–µ–π –∏ –Ω–∞—á–Ω–∏—Ç–µ –≤–µ—Å–µ–ª—å–µ!",
            reply_markup=reply_markup
        )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        callback_data = query.data
        
        if callback_data == "start_game":
            await self.start_game(query)
        elif callback_data == "show_rules":
            await self.show_rules(query)
        elif callback_data == "show_stats":
            await self.show_stats(query)
        elif callback_data == "show_leaderboard":
            await self.show_leaderboard(query)
        elif callback_data.startswith("situation_"):
            await self.choose_situation(query)
        elif callback_data.startswith("begin_"):
            await self.begin_game(query)
        elif callback_data.startswith("memechoice_"):
            await self.handle_meme_choice(query)
        elif callback_data.startswith("vote_"):
            await self.handle_vote(query)
        elif callback_data.startswith("nextround_"):
            await self.next_round(query)
        elif callback_data.startswith("endgame_"):
            await self.end_game(query)
    
    async def start_game(self, query):
        chat_id = query.message.chat_id
        user_id = query.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
        self.active_games[chat_id] = {
            'players': [user_id],
            'player_names': {user_id: query.from_user.first_name},
            'status': 'waiting',
            'leader': user_id,
            'round_number': 0,
            'scores': {user_id: 0},
            'submitted_memes': {},
            'voting_options': {},
            'message_id': query.message.message_id
        }
        
        await query.edit_message_text(
            "üéÆ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!\n"
            f"–ò–≥—Ä–æ–∫–æ–≤: 1/{Config.MAX_PLAYERS}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º –∫–æ–º–∞–Ω–¥—É —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:\n"
            f"/join_{chat_id}\n\n"
            "–ö–æ–≥–¥–∞ –≤—Å–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—Å—è, –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data=f"begin_{chat_id}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É", callback_data=f"endgame_{chat_id}")]
            ])
        )
    
    async def join_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            if not context.args:
                await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /join_123456789")
                return
                
            chat_id = int(context.args[0])
            user = update.effective_user
            
            print(f"üîÑ –ò–≥—Ä–æ–∫ {user.first_name} –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ {chat_id}")
            
            if chat_id not in self.active_games:
                await update.message.reply_text("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                return
            
            game = self.active_games[chat_id]
            
            if user.id in game['players']:
                await update.message.reply_text("‚úÖ –í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!")
                return
            
            if len(game['players']) >= Config.MAX_PLAYERS:
                await update.message.reply_text("‚ùå –ú–∞–∫—Å–∏–º—É–º 8 –∏–≥—Ä–æ–∫–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
            game['players'].append(user.id)
            game['player_names'][user.id] = user.first_name
            game['scores'][user.id] = 0
            self.db.add_user(user.id, user.username, user.first_name, user.last_name)
            
            print(f"‚úÖ –ò–≥—Ä–æ–∫ {user.first_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–≥—Ä—É {chat_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã
            try:
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=game.get('message_id'),
                    text=f"üéÆ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!\n–ò–≥—Ä–æ–∫–æ–≤: {len(game['players'])}/{Config.MAX_PLAYERS}\n\n"
                         f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º –∫–æ–º–∞–Ω–¥—É: /join_{chat_id}\n\n"
                         "–ö–æ–≥–¥–∞ –≤—Å–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—Å—è, –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data=f"begin_{chat_id}")],
                        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É", callback_data=f"endgame_{chat_id}")]
                    ])
                )
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            await update.message.reply_text(
                f"‚úÖ {user.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!\n"
                f"–ò–≥—Ä–æ–∫–æ–≤: {len(game['players'])}/{Config.MAX_PLAYERS}"
            )
            
        except ValueError:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /join_123456789")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ")
    
    async def begin_game(self, query):
        chat_id = int(query.data.split('_')[1])
        game = self.active_games.get(chat_id)
        
        if not game:
            await query.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        if len(game['players']) < Config.MIN_PLAYERS:
            await query.answer("‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞!")
            return
        
        game['round_number'] = 1
        game['status'] = 'choosing_situation'
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏
        situations = self.file_manager.get_random_situations(Config.SITUATIONS_TO_CHOOSE)
        game['situations'] = situations
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–∏—Ç—É–∞—Ü–∏—è–º–∏
        keyboard = []
        for i, situation in enumerate(situations):
            keyboard.append([InlineKeyboardButton(
                situation[:40] + "..." if len(situation) > 40 else situation,
                callback_data=f"situation_{i}"
            )])
        
        leader_name = game['player_names'][game['leader']]
        
        await query.edit_message_text(
            f"üìù {leader_name}, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –¥–ª—è —Ä–∞—É–Ω–¥–∞ {game['round_number']}:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def choose_situation(self, query):
        chat_id = query.message.chat_id
        game = self.active_games.get(chat_id)
        
        if not game or query.from_user.id != game['leader']:
            await query.answer("‚ùå –¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å!")
            return
        
        situation_index = int(query.data.split('_')[1])
        chosen_situation = game['situations'][situation_index]
        game['current_situation'] = chosen_situation
        game['status'] = 'players_choosing'
        game['submitted_memes'] = {}  # user_id -> meme_data
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Ç—É–∞—Ü–∏—é –≤—Å–µ–º –≤ —á–∞—Ç–µ
        await query.edit_message_text(
            f"üé≤ –†–ê–£–ù–î {game['round_number']} - –°–ò–¢–£–ê–¶–ò–Ø:\n\n{chosen_situation}\n\n"
            "–ò–≥—Ä–æ–∫–∏ –≤—ã–±–∏—Ä–∞—é—Ç –º–µ–º—ã...",
            reply_markup=None
        )
        
        # –†–∞–∑–¥–∞–µ–º –º–µ–º—ã –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É –≤ –õ–°
        for player_id in game['players']:
            if player_id != game['leader']:  # –í–µ–¥—É—â–∏–π –Ω–µ –≤—ã–±–∏—Ä–∞–µ—Ç –º–µ–º
                await self.distribute_memes_to_player(chat_id, player_id, query.message.bot)
        
        print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—è: {chosen_situation}")
    
    async def distribute_memes_to_player(self, chat_id, player_id, bot):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –º–µ–º—ã –¥–ª—è –∏–≥—Ä–æ–∫–∞
            memes = self.file_manager.get_random_memes(Config.MEMES_PER_PLAYER)
            
            if not memes:
                await bot.send_message(
                    player_id,
                    "‚ùå –í –±–∞–∑–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –º–µ–º—ã! –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –º–µ–º—ã –≤ –ø–∞–ø–∫—É data/memes/"
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–º—ã –¥–ª—è —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            if player_id not in self.user_sessions:
                self.user_sessions[player_id] = {}
            
            self.user_sessions[player_id][chat_id] = memes
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ–º–∞
            keyboard = []
            for i, meme in enumerate(memes):
                keyboard.append([InlineKeyboardButton(
                    f"–ú–µ–º {i+1}", 
                    callback_data=f"memechoice_{chat_id}_{i}"
                )])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –º–µ–º –∫–∞–∫ –º–µ–¥–∏–∞
            media_group = []
            for i, meme in enumerate(memes):
                file_path = meme['path']
                if meme['filename'].lower().endswith(('.mp4', '.mov', '.avi')):
                    media = InputMediaVideo(media=open(file_path, 'rb'), caption=f"–ú–µ–º {i+1}" if i == 0 else "")
                else:
                    media = InputMediaPhoto(media=open(file_path, 'rb'), caption=f"–ú–µ–º {i+1}" if i == 0 else "")
                media_group.append(media)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
            await bot.send_media_group(player_id, media=media_group)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
            await bot.send_message(
                player_id,
                f"üé≤ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ–º –¥–ª—è —Å–∏—Ç—É–∞—Ü–∏–∏:\n\n{self.active_games[chat_id]['current_situation']}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–æ–≤ –∏–≥—Ä–æ–∫—É {player_id}: {e}")
            await bot.send_message(
                player_id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–º–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def handle_meme_choice(self, query):
        try:
            data_parts = query.data.split('_')
            chat_id = int(data_parts[1])
            meme_index = int(data_parts[2])
            user_id = query.from_user.id
            
            game = self.active_games.get(chat_id)
            if not game or game['status'] != 'players_choosing':
                await query.answer("‚ùå –í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –º–µ–º–æ–≤ –∏—Å—Ç–µ–∫–ª–æ!")
                return
            
            if user_id in game['submitted_memes']:
                await query.answer("‚ùå –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–µ–º!")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ–º
            user_memes = self.user_sessions.get(user_id, {}).get(chat_id, [])
            if not user_memes or meme_index >= len(user_memes):
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ–º–∞!")
                return
            
            selected_meme = user_memes[meme_index]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞
            game['submitted_memes'][user_id] = {
                'meme': selected_meme,
                'player_name': game['player_names'][user_id]
            }
            
            await query.answer(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ–º {meme_index + 1}!")
            await query.edit_message_text("‚úÖ –í–∞—à –º–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ñ–¥–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∏–≥—Ä–æ–∫–∏ —Å–¥–µ–ª–∞–ª–∏ –≤—ã–±–æ—Ä (–∫—Ä–æ–º–µ –≤–µ–¥—É—â–µ–≥–æ)
            expected_players = len(game['players']) - 1  # –í—Å–µ –∫—Ä–æ–º–µ –≤–µ–¥—É—â–µ–≥–æ
            if len(game['submitted_memes']) >= expected_players:
                await self.start_voting(chat_id, query.message.bot)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –º–µ–º–∞: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ–º–∞!")
    
    async def start_voting(self, chat_id, bot):
        game = self.active_games[chat_id]
        game['status'] = 'voting'
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –º–µ–º—ã –≤–µ–¥—É—â–µ–º—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        leader_id = game['leader']
        
        if not game['submitted_memes']:
            await bot.send_message(chat_id, "‚ùå –ù–∏–∫—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –º–µ–º—ã! –†–∞—É–Ω–¥ –ø—Ä–æ–ø—É—â–µ–Ω.")
            await self.next_round_auto(chat_id, bot)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –º–µ–º –≤–µ–¥—É—â–µ–º—É
        voting_options = {}
        media_group = []
        
        for i, (user_id, meme_data) in enumerate(game['submitted_memes'].items()):
            meme = meme_data['meme']
            player_name = meme_data['player_name']
            option_id = str(uuid.uuid4())[:8]  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            voting_options[option_id] = user_id
            
            caption = f"üé≠ –í–∞—Ä–∏–∞–Ω—Ç –æ—Ç {player_name}" if i == 0 else ""
            
            if meme['filename'].lower().endswith(('.mp4', '.mov', '.avi')):
                media = InputMediaVideo(media=open(meme['path'], 'rb'), caption=caption)
            else:
                media = InputMediaPhoto(media=open(meme['path'], 'rb'), caption=caption)
            
            media_group.append(media)
        
        game['voting_options'] = voting_options
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
        await bot.send_media_group(leader_id, media=media_group)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        keyboard = []
        temp_row = []
        for i, option_id in enumerate(voting_options.keys()):
            temp_row.append(InlineKeyboardButton(f"üéØ {i+1}", callback_data=f"vote_{chat_id}_{option_id}"))
            if len(temp_row) >= 3:  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
                keyboard.append(temp_row)
                temp_row = []
        if temp_row:
            keyboard.append(temp_row)
        
        await bot.send_message(
            leader_id,
            f"üìä {game['player_names'][leader_id]}, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∞–º—ã–π —Å–º–µ—à–Ω–æ–π –º–µ–º –¥–ª—è —Å–∏—Ç—É–∞—Ü–∏–∏:\n\n{game['current_situation']}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —á–∞—Ç–µ
        await bot.send_message(
            chat_id,
            "üìä –í—Å–µ –º–µ–º—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –í–µ–¥—É—â–∏–π –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è..."
        )
    
    async def handle_vote(self, query):
        try:
            data_parts = query.data.split('_')
            chat_id = int(data_parts[1])
            option_id = data_parts[2]
            voter_id = query.from_user.id
            
            game = self.active_games.get(chat_id)
            if not game or game['status'] != 'voting':
                await query.answer("‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                return
            
            if voter_id != game['leader']:
                await query.answer("‚ùå –¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!")
                return
            
            if option_id not in game['voting_options']:
                await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!")
                return
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            winner_id = game['voting_options'][option_id]
            winner_name = game['player_names'][winner_id]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç
            game['scores'][winner_id] = game['scores'].get(winner_id, 0) + 1
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —á–∞—Ç
            winner_meme = game['submitted_memes'][winner_id]['meme']
            
            if winner_meme['filename'].lower().endswith(('.mp4', '.mov', '.avi')):
                await query.message.bot.send_video(
                    chat_id,
                    video=open(winner_meme['path'], 'rb'),
                    caption=f"üèÜ –ü–û–ë–ï–î–ò–¢–ï–õ–¨ –†–ê–£–ù–î–ê: {winner_name}!\n\n"
                           f"–°–∏—Ç—É–∞—Ü–∏—è: {game['current_situation']}\n\n"
                           f"üíØ –¢–µ–∫—É—â–∏–µ –æ—á–∫–∏:\n" + 
                           "\n".join([f"{name}: {score}" for name, score in sorted(
                               [(game['player_names'][pid], score) for pid, score in game['scores'].items()],
                               key=lambda x: x[1], reverse=True
                           )])
                )
            else:
                await query.message.bot.send_photo(
                    chat_id,
                    photo=open(winner_meme['path'], 'rb'),
                    caption=f"üèÜ –ü–û–ë–ï–î–ò–¢–ï–õ–¨ –†–ê–£–ù–î–ê: {winner_name}!\n\n"
                           f"–°–∏—Ç—É–∞—Ü–∏—è: {game['current_situation']}\n\n"
                           f"üíØ –¢–µ–∫—É—â–∏–µ –æ—á–∫–∏:\n" + 
                           "\n".join([f"{name}: {score}" for name, score in sorted(
                               [(game['player_names'][pid], score) for pid, score in game['scores'].items()],
                               key=lambda x: x[1], reverse=True
                           )])
                )
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
            game['status'] = 'round_complete'
            
            keyboard = [
                [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥", callback_data=f"nextround_{chat_id}")],
                [InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É", callback_data=f"endgame_{chat_id}")]
            ]
            
            await query.edit_message_text(
                "‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!")
    
    async def next_round(self, query):
        chat_id = int(query.data.split('_')[1])
        await self.next_round_auto(chat_id, query.message.bot)
        await query.answer("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞...")
    
    async def next_round_auto(self, chat_id, bot):
        game = self.active_games.get(chat_id)
        if not game:
            return
        
        # –ú–µ–Ω—è–µ–º –≤–µ–¥—É—â–µ–≥–æ –ø–æ –∫—Ä—É–≥—É
        current_leader_index = game['players'].index(game['leader'])
        next_leader_index = (current_leader_index + 1) % len(game['players'])
        game['leader'] = game['players'][next_leader_index]
        game['round_number'] += 1
        
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
        game['status'] = 'choosing_situation'
        situations = self.file_manager.get_random_situations(Config.SITUATIONS_TO_CHOOSE)
        game['situations'] = situations
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–∏—Ç—É–∞—Ü–∏—è–º–∏
        keyboard = []
        for i, situation in enumerate(situations):
            keyboard.append([InlineKeyboardButton(
                situation[:40] + "..." if len(situation) > 40 else situation,
                callback_data=f"situation_{i}"
            )])
        
        leader_name = game['player_names'][game['leader']]
        
        await bot.send_message(
            chat_id,
            f"üîÑ –†–ê–£–ù–î {game['round_number']}\nüìù {leader_name}, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def end_game(self, query):
        chat_id = int(query.data.split('_')[1])
        game = self.active_games.get(chat_id)
        
        if not game:
            await query.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if game['scores']:
            winner_id = max(game['scores'], key=game['scores'].get)
            winner_name = game['player_names'][winner_id]
            winner_score = game['scores'][winner_id]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results = "üèÜ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:\n\n"
            sorted_players = sorted(game['scores'].items(), key=lambda x: x[1], reverse=True)
            
            for i, (player_id, score) in enumerate(sorted_players, 1):
                player_name = game['player_names'][player_id]
                results += f"{i}. {player_name}: {score} –æ—á–∫–æ–≤\n"
            
            results += f"\nüéâ –ü–û–ë–ï–î–ò–¢–ï–õ–¨: {winner_name} —Å {winner_score} –æ—á–∫–∞–º–∏!"
            
            await query.edit_message_text(results)
        else:
            await query.edit_message_text("üéÆ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∏–∫—Ç–æ –Ω–µ –Ω–∞–±—Ä–∞–ª –æ—á–∫–æ–≤.")
        
        # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        if chat_id in self.active_games:
            del self.active_games[chat_id]
    
    async def show_rules(self, query):
        rules_text = """
üìã –ü–†–ê–í–ò–õ–ê –ò–ì–†–´:

üë• –ò–≥—Ä–æ–∫–æ–≤: 2-8 —á–µ–ª–æ–≤–µ–∫
üÉè –ö–∞–∂–¥—ã–π –ø–æ–ª—É—á–∞–µ—Ç –ø–æ 6 –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –º–µ–º–∞–º–∏
üëë –ü–µ—Ä–≤—ã–π –≤–µ–¥—É—â–∏–π - —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã
üìñ –í–µ–¥—É—â–∏–π –≤—ã–±–∏—Ä–∞–µ—Ç –∏ –∑–∞—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é
üòÇ –ò–≥—Ä–æ–∫–∏ –≤—ã–±–∏—Ä–∞—é—Ç —Å–∞–º—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ–º
üèÜ –í–µ–¥—É—â–∏–π –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ä–∞—É–Ω–¥–∞
üîÑ –í–µ–¥—É—â–∏–π –º–µ–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–∞—É–Ω–¥
üéØ –ü–æ–±–µ–∂–¥–∞–µ—Ç –Ω–∞–±—Ä–∞–≤—à–∏–π –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –æ—á–∫–æ–≤

üé• –ú–µ–º—ã –º–æ–≥—É—Ç –±—ã—Ç—å –∫–∞–∫ —Ñ–æ—Ç–æ, —Ç–∞–∫ –∏ –≤–∏–¥–µ–æ!

üìù –ö–ê–ö –ò–ì–†–ê–¢–¨:
1. –°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start
2. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π: /join_123456789
3. –í–µ–¥—É—â–∏–π –≤—ã–±–∏—Ä–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é
4. –ò–≥—Ä–æ–∫–∏ –≤—ã–±–∏—Ä–∞—é—Ç –º–µ–º—ã –∏–∑ –õ–°
5. –í–µ–¥—É—â–∏–π –≥–æ–ª–æ—Å—É–µ—Ç –∑–∞ –ª—É—á—à–∏–π –º–µ–º
6. –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è!
        """
        await query.edit_message_text(rules_text)
    
    async def show_stats(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = query.from_user.id
        user_stats = self.db.get_user_stats(user_id)
        
        stats_text = f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê {query.from_user.first_name}:

üéÆ –°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: {user_stats['games_played']}
üèÜ –í—Å–µ–≥–æ –æ—á–∫–æ–≤: {user_stats['total_score']}
üìà –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {user_stats['total_score'] / user_stats['games_played'] if user_stats['games_played'] > 0 else 0:.1f}
        """
        
        await query.edit_message_text(stats_text)
    
    async def show_leaderboard(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"""
        leaderboard_data = self.db.get_leaderboard(10)
        
        if not leaderboard_data:
            await query.edit_message_text("üìä –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–ª! –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!")
            return
        
        leaderboard_text = "üèÜ –¢–û–ü-10 –ò–ì–†–û–ö–û–í:\n\n"
        for i, player in enumerate(leaderboard_data, 1):
            username = player['username'] or player['first_name']
            leaderboard_text += f"{i}. {username} - {player['total_score']} –æ—á–∫–æ–≤ ({player['games_played']} –∏–≥—Ä)\n"
        
        await query.edit_message_text(leaderboard_text)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        user_id = update.effective_user.id
        user_stats = self.db.get_user_stats(user_id)
        
        stats_text = f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê {update.effective_user.first_name}:

üéÆ –°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: {user_stats['games_played']}
üèÜ –í—Å–µ–≥–æ –æ—á–∫–æ–≤: {user_stats['total_score']}
üìà –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {user_stats['total_score'] / user_stats['games_played'] if user_stats['games_played'] > 0 else 0:.1f}
        """
        
        await update.message.reply_text(stats_text)
    
    async def leaderboard_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞"""
        leaderboard_data = self.db.get_leaderboard(10)
        
        if not leaderboard_data:
            await update.message.reply_text("üìä –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–ª! –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!")
            return
        
        leaderboard_text = "üèÜ –¢–û–ü-10 –ò–ì–†–û–ö–û–í:\n\n"
        for i, player in enumerate(leaderboard_data, 1):
            username = player['username'] or player['first_name']
            leaderboard_text += f"{i}. {username} - {player['total_score']} –æ—á–∫–æ–≤ ({player['games_played']} –∏–≥—Ä)\n"
        
        await update.message.reply_text(leaderboard_text)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
        help_text = """
ü§ñ –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê:

/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/leaderboard - –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

üéÆ –ö–ê–ö –ò–ì–†–ê–¢–¨:
1. –°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É —á–µ—Ä–µ–∑ /start
2. –î—Ä—É–∑—å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ /join_123456789
3. –í–µ–¥—É—â–∏–π –≤—ã–±–∏—Ä–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é
4. –ò–≥—Ä–æ–∫–∏ –≤—ã–±–∏—Ä–∞—é—Ç –º–µ–º—ã –∏–∑ –õ–°
5. –í–µ–¥—É—â–∏–π –≥–æ–ª–æ—Å—É–µ—Ç –∑–∞ –ª—É—á—à–∏–π –º–µ–º
6. –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è!

üìÅ –î–æ–±–∞–≤—å—Ç–µ –º–µ–º—ã –≤ –ø–∞–ø–∫—É data/memes/
        """
        await update.message.reply_text(help_text)

def main():
    if not Config.BOT_TOKEN:
        logging.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
        return
    
    application = Application.builder().token(Config.BOT_TOKEN).build()
    bot = MemesGameBot()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("join", bot.join_game))
    application.add_handler(CommandHandler("stats", bot.stats_command))
    application.add_handler(CommandHandler("leaderboard", bot.leaderboard_command))
    application.add_handler(CommandHandler("help", bot.help_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(bot.handle_callback))
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == "__main__":
    main()
