import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

print("=== –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞ ===")

try:
    from database import Database
    print("‚úÖ Database –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Database: {e}")
    raise

try:
    from config import Config
    print("‚úÖ Config –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Config: {e}")
    raise

try:
    from file_manager import FileManager
    print("‚úÖ FileManager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ FileManager: {e}")
    raise

print("=== –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã ===")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

class MemesGameBot:
    def __init__(self):
        self.db = Database()
        self.file_manager = FileManager()
        self.active_games = {}
        self.game_messages = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π –∏–≥—Ä
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        self.db.add_user(user.id, user.username, user.first_name, user.last_name)
        
        keyboard = [
            [InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game")],
            [InlineKeyboardButton("üìã –ü—Ä–∞–≤–∏–ª–∞", callback_data="show_rules")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '–ú–µ–º—ã –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏'!\n\n"
            "–°–æ–±–µ—Ä–∏ 2-8 –¥—Ä—É–∑–µ–π –∏ –Ω–∞—á–Ω–∏—Ç–µ –≤–µ—Å–µ–ª—å–µ!",
            reply_markup=reply_markup
        )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        if query.data == "start_game":
            await self.start_game(query)
        elif query.data == "show_rules":
            await self.show_rules(query)
        elif query.data.startswith("situation_"):
            await self.choose_situation(query)
        elif query.data.startswith("begin_"):
            await self.begin_game(query)
    
    async def start_game(self, query):
        chat_id = query.message.chat_id
        user_id = query.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
        self.active_games[chat_id] = {
            'players': [user_id],
            'status': 'waiting',
            'leader': user_id,
            'message_id': query.message.message_id
        }
        
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data=f"begin_{chat_id}")],
            [InlineKeyboardButton("üìã –ü—Ä–∞–≤–∏–ª–∞", callback_data="show_rules")]
        ])
        
        await query.edit_message_text(
            "üéÆ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!\n"
            f"–ò–≥—Ä–æ–∫–æ–≤: 1/{Config.MAX_PLAYERS}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º –∫–æ–º–∞–Ω–¥—É —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:\n"
            f"/join {chat_id}",
            reply_markup=reply_markup
        )
    
    async def join_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            print(f"üîÑ –ö–æ–º–∞–Ω–¥–∞ join –ø–æ–ª—É—á–µ–Ω–∞: args={context.args}")
            
            if not context.args:
                await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /join 123456789")
                return
                
            chat_id = int(context.args[0])
            user = update.effective_user
            
            print(f"üîÑ –ò–≥—Ä–æ–∫ {user.first_name} –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ {chat_id}")
            print(f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã: {list(self.active_games.keys())}")
            
            if chat_id not in self.active_games:
                await update.message.reply_text("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É —á–µ—Ä–µ–∑ /start")
                return
            
            game = self.active_games[chat_id]
            
            if user.id in game['players']:
                await update.message.reply_text("‚úÖ –í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!")
                return
            
            if len(game['players']) >= Config.MAX_PLAYERS:
                await update.message.reply_text("‚ùå –ú–∞–∫—Å–∏–º—É–º 8 –∏–≥—Ä–æ–∫–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
            game['players'].append(user.id)
            self.db.add_user(user.id, user.username, user.first_name, user.last_name)
            
            print(f"‚úÖ –ò–≥—Ä–æ–∫ {user.first_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–≥—Ä—É {chat_id}")
            print(f"‚úÖ –¢–µ–ø–µ—Ä—å –∏–≥—Ä–æ–∫–æ–≤: {len(game['players'])}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
            await update.message.reply_text(
                f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ!\n"
                f"–ò–≥—Ä–æ–∫–æ–≤: {len(game['players'])}/{Config.MAX_PLAYERS}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç –∏–≥—Ä—ã
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"‚úÖ {user.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!\n"
                     f"–ò–≥—Ä–æ–∫–æ–≤: {len(game['players'])}/{Config.MAX_PLAYERS}"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–π
            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data=f"begin_{chat_id}")],
                [InlineKeyboardButton("üìã –ü—Ä–∞–≤–∏–ª–∞", callback_data="show_rules")]
            ])
            
            try:
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=game['message_id'],
                    text=f"üéÆ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!\n–ò–≥—Ä–æ–∫–æ–≤: {len(game['players'])}/{Config.MAX_PLAYERS}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º –∫–æ–º–∞–Ω–¥—É —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:\n/join {chat_id}",
                    reply_markup=reply_markup
                )
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
        except ValueError:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /join 123456789")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ")
    
    async def begin_game(self, query):
        chat_id = int(query.data.split('_')[1])
        game = self.active_games.get(chat_id)
        
        if not game:
            await query.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
            
        if len(game['players']) < Config.MIN_PLAYERS:
            await query.answer("‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏
        situations = self.file_manager.get_random_situations(Config.SITUATIONS_TO_CHOOSE)
        game['situations'] = situations
        game['status'] = 'choosing_situation'
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–∏—Ç—É–∞—Ü–∏—è–º–∏
        keyboard = []
        for i, situation in enumerate(situations):
            keyboard.append([InlineKeyboardButton(
                situation[:40] + "..." if len(situation) > 40 else situation,
                callback_data=f"situation_{i}"
            )])
        
        await query.edit_message_text(
            "üìù –í–µ–¥—É—â–∏–π, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –¥–ª—è —Ä–∞—É–Ω–¥–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def choose_situation(self, query):
        chat_id = query.message.chat_id
        game = self.active_games.get(chat_id)
        
        if not game or query.from_user.id != game['leader']:
            await query.answer("‚ùå –¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å!")
            return
        
        situation_index = int(query.data.split('_')[1])
        chosen_situation = game['situations'][situation_index]
        game['current_situation'] = chosen_situation
        game['status'] = 'players_choosing'
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Ç—É–∞—Ü–∏—é –≤—Å–µ–º
        await query.edit_message_text(
            f"üé≤ –°–ò–¢–£–ê–¶–ò–Ø –†–ê–£–ù–î–ê:\n\n{chosen_situation}\n\n"
            "–ò–≥—Ä–æ–∫–∏ –≤—ã–±–∏—Ä–∞—é—Ç –º–µ–º—ã...",
            reply_markup=None
        )
        
        print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—è: {chosen_situation}")
    
    async def show_rules(self, query):
        rules_text = """
üìã –ü–†–ê–í–ò–õ–ê –ò–ì–†–´:

üë• –ò–≥—Ä–æ–∫–æ–≤: 2-8 —á–µ–ª–æ–≤–µ–∫
üÉè –ö–∞–∂–¥—ã–π –ø–æ–ª—É—á–∞–µ—Ç –ø–æ 6 –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –º–µ–º–∞–º–∏
üëë –ü–µ—Ä–≤—ã–π –≤–µ–¥—É—â–∏–π - —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã
üìñ –í–µ–¥—É—â–∏–π –≤—ã–±–∏—Ä–∞–µ—Ç –∏ –∑–∞—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é
üòÇ –ò–≥—Ä–æ–∫–∏ –≤—ã–±–∏—Ä–∞—é—Ç —Å–∞–º—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ–º
üèÜ –í–µ–¥—É—â–∏–π –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ä–∞—É–Ω–¥–∞
üîÑ –í–µ–¥—É—â–∏–π –º–µ–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–∞—É–Ω–¥
üéØ –ü–æ–±–µ–∂–¥–∞–µ—Ç –Ω–∞–±—Ä–∞–≤—à–∏–π –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –æ—á–∫–æ–≤

üé• –ú–µ–º—ã –º–æ–≥—É—Ç –±—ã—Ç—å –∫–∞–∫ —Ñ–æ—Ç–æ, —Ç–∞–∫ –∏ –≤–∏–¥–µ–æ!
        """
        await query.edit_message_text(rules_text)

def main():
    if not Config.BOT_TOKEN:
        logging.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
        return
    
    application = Application.builder().token(Config.BOT_TOKEN).build()
    bot = MemesGameBot()
    
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("join", bot.join_game))
    application.add_handler(CallbackQueryHandler(bot.handle_callback))
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == "__main__":
    main()
